{"abi":[{"type":"function","name":"assertExists","inputs":[{"name":"self","type":"tuple","internalType":"struct Variable","components":[{"name":"ty","type":"tuple","internalType":"struct Type","components":[{"name":"kind","type":"TypeKind","internalType":"enum TypeKind"},{"name":"isArray","type":"bool","internalType":"bool"}]},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"pure"},{"type":"error","name":"NotInitialized","inputs":[]},{"type":"error","name":"TypeMismatch","inputs":[{"name":"expected","type":"string","internalType":"string"},{"name":"actual","type":"string","internalType":"string"}]},{"type":"error","name":"UnsafeCast","inputs":[{"name":"message","type":"string","internalType":"string"}]}],"bytecode":{"object":"0x6103ea610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806315af8fee1461003a575b600080fd5b610054600480360381019061004f919061033c565b610056565b005b6000600781111561006a57610069610385565b5b816000015160000151600781111561008557610084610385565b5b036100bc576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610121826100d8565b810181811067ffffffffffffffff821117156101405761013f6100e9565b5b80604052505050565b60006101536100bf565b905061015f8282610118565b919050565b600080fd5b6008811061017657600080fd5b50565b60008135905061018881610169565b92915050565b60008115159050919050565b6101a38161018e565b81146101ae57600080fd5b50565b6000813590506101c08161019a565b92915050565b6000604082840312156101dc576101db6100d3565b5b6101e66040610149565b905060006101f684828501610179565b600083015250602061020a848285016101b1565b60208301525092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561023b5761023a6100e9565b5b610244826100d8565b9050602081019050919050565b82818337600083830152505050565b600061027361026e84610220565b610149565b90508281526020810184848401111561028f5761028e61021b565b5b61029a848285610251565b509392505050565b600082601f8301126102b7576102b6610216565b5b81356102c7848260208601610260565b91505092915050565b6000606082840312156102e6576102e56100d3565b5b6102f06040610149565b90506000610300848285016101c6565b600083015250604082013567ffffffffffffffff81111561032457610323610164565b5b610330848285016102a2565b60208301525092915050565b600060208284031215610352576103516100c9565b5b600082013567ffffffffffffffff8111156103705761036f6100ce565b5b61037c848285016102d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220a44925475dd08019f6153dd2b864c2b6913892768a2341979e35b2749686a6ba64736f6c63430008130033","sourceMap":"1690:16281:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806315af8fee1461003a575b600080fd5b610054600480360381019061004f919061033c565b610056565b005b6000600781111561006a57610069610385565b5b816000015160000151600781111561008557610084610385565b5b036100bc576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610121826100d8565b810181811067ffffffffffffffff821117156101405761013f6100e9565b5b80604052505050565b60006101536100bf565b905061015f8282610118565b919050565b600080fd5b6008811061017657600080fd5b50565b60008135905061018881610169565b92915050565b60008115159050919050565b6101a38161018e565b81146101ae57600080fd5b50565b6000813590506101c08161019a565b92915050565b6000604082840312156101dc576101db6100d3565b5b6101e66040610149565b905060006101f684828501610179565b600083015250602061020a848285016101b1565b60208301525092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561023b5761023a6100e9565b5b610244826100d8565b9050602081019050919050565b82818337600083830152505050565b600061027361026e84610220565b610149565b90508281526020810184848401111561028f5761028e61021b565b5b61029a848285610251565b509392505050565b600082601f8301126102b7576102b6610216565b5b81356102c7848260208601610260565b91505092915050565b6000606082840312156102e6576102e56100d3565b5b6102f06040610149565b90506000610300848285016101c6565b600083015250604082013567ffffffffffffffff81111561032457610323610164565b5b610330848285016102a2565b60208301525092915050565b600060208284031215610352576103516100c9565b5b600082013567ffffffffffffffff8111156103705761036f6100ce565b5b61037c848285016102d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220a44925475dd08019f6153dd2b864c2b6913892768a2341979e35b2749686a6ba64736f6c63430008130033","sourceMap":"1690:16281:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;4342:155;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;4428:13;4412:29;;;;;;;;:::i;:::-;;:4;:7;;;:12;;;:29;;;;;;;;:::i;:::-;;;4408:83;;4464:16;;;;;;;;;;;;;;4408:83;4342:155;:::o;7:75:71:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:102;498:6;549:2;545:7;540:2;533:5;529:14;525:28;515:38;;457:102;;;:::o;565:180::-;613:77;610:1;603:88;710:4;707:1;700:15;734:4;731:1;724:15;751:281;834:27;856:4;834:27;:::i;:::-;826:6;822:40;964:6;952:10;949:22;928:18;916:10;913:34;910:62;907:88;;;975:18;;:::i;:::-;907:88;1015:10;1011:2;1004:22;794:238;751:281;;:::o;1038:129::-;1072:6;1099:20;;:::i;:::-;1089:30;;1128:33;1156:4;1148:6;1128:33;:::i;:::-;1038:129;;;:::o;1173:117::-;1282:1;1279;1272:12;1296:111;1381:1;1374:5;1371:12;1361:40;;1397:1;1394;1387:12;1361:40;1296:111;:::o;1413:163::-;1471:5;1509:6;1496:20;1487:29;;1525:45;1564:5;1525:45;:::i;:::-;1413:163;;;;:::o;1582:90::-;1616:7;1659:5;1652:13;1645:21;1634:32;;1582:90;;;:::o;1678:116::-;1748:21;1763:5;1748:21;:::i;:::-;1741:5;1738:32;1728:60;;1784:1;1781;1774:12;1728:60;1678:116;:::o;1800:133::-;1843:5;1881:6;1868:20;1859:29;;1897:30;1921:5;1897:30;:::i;:::-;1800:133;;;;:::o;1958:582::-;2028:5;2072:4;2060:9;2055:3;2051:19;2047:30;2044:117;;;2080:79;;:::i;:::-;2044:117;2179:21;2195:4;2179:21;:::i;:::-;2170:30;;2259:1;2299:61;2356:3;2347:6;2336:9;2332:22;2299:61;:::i;:::-;2292:4;2285:5;2281:16;2274:87;2210:162;2434:2;2475:46;2517:3;2508:6;2497:9;2493:22;2475:46;:::i;:::-;2468:4;2461:5;2457:16;2450:72;2382:151;1958:582;;;;:::o;2546:117::-;2655:1;2652;2645:12;2669:117;2778:1;2775;2768:12;2792:307;2853:4;2943:18;2935:6;2932:30;2929:56;;;2965:18;;:::i;:::-;2929:56;3003:29;3025:6;3003:29;:::i;:::-;2995:37;;3087:4;3081;3077:15;3069:23;;2792:307;;;:::o;3105:146::-;3202:6;3197:3;3192;3179:30;3243:1;3234:6;3229:3;3225:16;3218:27;3105:146;;;:::o;3257:423::-;3334:5;3359:65;3375:48;3416:6;3375:48;:::i;:::-;3359:65;:::i;:::-;3350:74;;3447:6;3440:5;3433:21;3485:4;3478:5;3474:16;3523:3;3514:6;3509:3;3505:16;3502:25;3499:112;;;3530:79;;:::i;:::-;3499:112;3620:54;3667:6;3662:3;3657;3620:54;:::i;:::-;3340:340;3257:423;;;;;:::o;3699:338::-;3754:5;3803:3;3796:4;3788:6;3784:17;3780:27;3770:122;;3811:79;;:::i;:::-;3770:122;3928:6;3915:20;3953:78;4027:3;4019:6;4012:4;4004:6;4000:17;3953:78;:::i;:::-;3944:87;;3760:277;3699:338;;;;:::o;4066:762::-;4140:5;4184:4;4172:9;4167:3;4163:19;4159:30;4156:117;;;4192:79;;:::i;:::-;4156:117;4291:21;4307:4;4291:21;:::i;:::-;4282:30;;4369:1;4409:70;4475:3;4466:6;4455:9;4451:22;4409:70;:::i;:::-;4402:4;4395:5;4391:16;4384:96;4322:169;4578:2;4567:9;4563:18;4550:32;4609:18;4601:6;4598:30;4595:117;;;4631:79;;:::i;:::-;4595:117;4751:58;4805:3;4796:6;4785:9;4781:22;4751:58;:::i;:::-;4744:4;4737:5;4733:16;4726:84;4501:320;4066:762;;;;:::o;4834:539::-;4918:6;4967:2;4955:9;4946:7;4942:23;4938:32;4935:119;;;4973:79;;:::i;:::-;4935:119;5121:1;5110:9;5106:17;5093:31;5151:18;5143:6;5140:30;5137:117;;;5173:79;;:::i;:::-;5137:117;5278:78;5348:7;5339:6;5328:9;5324:22;5278:78;:::i;:::-;5268:88;;5064:302;4834:539;;;;:::o;5379:180::-;5427:77;5424:1;5417:88;5524:4;5521:1;5514:15;5548:4;5545:1;5538:15","linkReferences":{}},"methodIdentifiers":{"assertExists(Variable)":"15af8fee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"TypeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum TypeKind\",\"name\":\"kind\",\"type\":\"TypeKind\"},{\"internalType\":\"bool\",\"name\":\"isArray\",\"type\":\"bool\"}],\"internalType\":\"struct Type\",\"name\":\"ty\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Variable\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"assertExists\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ensures that when a `Variable` is cast to a concrete Solidity type, the operation is safe and the         underlying type matches what is expected.         Provides functions to check types, convert them to strings, and coerce `Variable` instances into         both single values and arrays of various types.         Usage example:         ```solidity         import {LibVariable} from \\\"./LibVariable.sol\\\";         contract MyContract {             using LibVariable for Variable;             StdConfig config;   // Assume 'config' is an instance of `StdConfig` and has already been loaded.             function readValues() public {                 // Retrieve a 'uint256' value from the config.                 uint256 myNumber = config.get(\\\"important_number\\\").toUint256();                 // Would revert with `TypeMismatch` as 'important_number' isn't a `uint256` in the config file.                 // string memory notANumber = config.get(\\\"important_number\\\").toString();                 // Retrieve a address array from the config.                 string[] memory admins = config.get(\\\"whitelisted_admins\\\").toAddressArray();          }      }      ```\",\"kind\":\"dev\",\"methods\":{\"assertExists(Variable)\":{\"details\":\"Checks if a `Variable` has been initialized, reverting if not.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for type-safe coercion of the `Variable` struct to concrete types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/forge-std/src/LibVariable.sol\":\"LibVariable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/lib/forge-std/src/LibVariable.sol\":{\"keccak256\":\"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af\",\"dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"NotInitialized"},{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"type":"error","name":"TypeMismatch"},{"inputs":[{"internalType":"string","name":"message","type":"string"}],"type":"error","name":"UnsafeCast"},{"inputs":[{"internalType":"struct Variable","name":"self","type":"tuple","components":[{"internalType":"struct Type","name":"ty","type":"tuple","components":[{"internalType":"enum TypeKind","name":"kind","type":"TypeKind"},{"internalType":"bool","name":"isArray","type":"bool"}]},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"pure","type":"function","name":"assertExists"}],"devdoc":{"kind":"dev","methods":{"assertExists(Variable)":{"details":"Checks if a `Variable` has been initialized, reverting if not."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/lib/forge-std/src/LibVariable.sol":"LibVariable"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/lib/forge-std/src/LibVariable.sol":{"keccak256":"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e","urls":["bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af","dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz"],"license":"MIT"}},"version":1},"id":2}